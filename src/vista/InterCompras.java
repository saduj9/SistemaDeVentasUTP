package vista;

import conexion.Conexion;
import controlador.Ctrl_Almacen;
import controlador.Ctrl_Empleado;
import controlador.Ctrl_RegistrarCompra;
import java.awt.Dimension;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Almacen;
import modelo.CabeceraCompra;
import modelo.DetalleCompra;

/**
 *
 * @author saduj
 */
public class InterCompras extends javax.swing.JInternalFrame {

    private DefaultTableModel modeloDatosProductos;
    //lista para el detalle de venta de los productos
    ArrayList<DetalleCompra> listaProductos = new ArrayList<>();
    private DetalleCompra producto;

    private int idProveedor = 0;//id del cliente sleccionado
    private int ultimoId = 0;
    private int idProducto = 0;
    private String nombre = "";
    private int cantidadProductoBBDD = 0;
    private double precioUnitario = 0.0;
    private int porcentajeIgv = 0;

    private int cantidad = 0;//cantidad de productos a comprar
    private double subtotal = 0.0;//cantidad por precio
    private double descuento = 0.0;
    private double igv = 0.0;
    private double totalPagar = 0.0;

    //variables para calculos globales
    private double subtotalGeneral = 0.0;
    private double descuentoGeneral = 0.0;
    private double igvGeneral = 0.0;
    private double totalPagarGeneral = 0.0;
    //fin de variables de calculos globales

    private int auxIdDetalle = 1;//id del detalle de compra

    public InterCompras() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturacion");

        this.CargarComboProveedor();
        this.CargarComboProductos();

        this.inicializarTablaProducto();

        txt_subtotal.setText("0.0");
        txt_igv.setText("0.0");
        txt_descuento.setText("0.0");
        txt_total_pagar.setText("0.0");

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();
    }

    private void inicializarTablaProducto() {
        modeloDatosProductos = new DefaultTableModel();
        //añadir columnas
        modeloDatosProductos.addColumn("N");
        modeloDatosProductos.addColumn("Nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("P. Unitario");
        modeloDatosProductos.addColumn("SubTotal");
        modeloDatosProductos.addColumn("Descuento");
        modeloDatosProductos.addColumn("IGV");
        modeloDatosProductos.addColumn("Total Pagar");
        modeloDatosProductos.addColumn("Accion");
        //agregar los datos del modelo a la tabla
        this.jTable_productos.setModel(modeloDatosProductos);
    }

    //metodo para presentar la informacion de la tavla DetalleVenta
    private void listaTablaProductos() {
        this.modeloDatosProductos.setRowCount(listaProductos.size());
        for (int i = 0; i < listaProductos.size(); i++) {
            this.modeloDatosProductos.setValueAt(i + 1, i, 0);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getNombre(), i, 1);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getCantidad(), i, 2);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getPrecioUnitario(), i, 3);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getSubTotal(), i, 4);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getDescuento(), i, 5);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getIgv(), i, 6);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getTotalPagar(), i, 7);
            this.modeloDatosProductos.setValueAt("Eliminar", i, 8);//aqui luego poner un boton de eliminar
        }
        //añadir al Jtable
        jTable_productos.setModel(modeloDatosProductos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox_proveedor = new javax.swing.JComboBox<>();
        jComboBox_estado_pago = new javax.swing.JComboBox<>();
        jComboBox_producto = new javax.swing.JComboBox<>();
        jComboBox_tipo_documento = new javax.swing.JComboBox<>();
        txt_numero_documento = new javax.swing.JTextField();
        txt_proveedor_buscar = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        txt_orden_compra = new javax.swing.JTextField();
        jButton_busca_proveedor = new javax.swing.JButton();
        jButton_añadir_producto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_subtotal = new javax.swing.JTextField();
        txt_descuento = new javax.swing.JTextField();
        txt_igv = new javax.swing.JTextField();
        txt_total_pagar = new javax.swing.JTextField();
        jButton_RegistrarVenta = new javax.swing.JButton();
        jButton_RegistrarVenta1 = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Registro de Compra");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("O/C:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 80, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Proveedor:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Numero doc:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 110, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Cantidad:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 80, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Estado:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 400, 80, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Numero doc:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 110, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Tipo doc:");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 80, -1));

        jComboBox_proveedor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_proveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione proveedor:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox_proveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 260, -1));

        jComboBox_estado_pago.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_estado_pago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pendiente de pago", "Pagado" }));
        getContentPane().add(jComboBox_estado_pago, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 400, -1, -1));

        jComboBox_producto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, -1));

        jComboBox_tipo_documento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_tipo_documento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Factura", "Boleta" }));
        getContentPane().add(jComboBox_tipo_documento, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 130, 80, -1));

        txt_numero_documento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_numero_documento, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 130, 150, -1));

        txt_proveedor_buscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_proveedor_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 150, -1));

        txt_cantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 60, -1));

        txt_orden_compra.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_orden_compra, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 150, -1));

        jButton_busca_proveedor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_busca_proveedor.setText("Buscar por RUC");
        jButton_busca_proveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_busca_proveedorActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_busca_proveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 140, -1));

        jButton_añadir_producto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_añadir_producto.setText("Añadir Productos");
        jButton_añadir_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_añadir_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_añadir_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 150, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_productosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 760, 210));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Subtotal:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Descuento:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("IGV:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Total a pagar:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, -1));

        txt_subtotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_subtotal.setEnabled(false);
        jPanel2.add(txt_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 17, 120, -1));

        txt_descuento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_descuento.setEnabled(false);
        jPanel2.add(txt_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 120, -1));

        txt_igv.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_igv.setEnabled(false);
        jPanel2.add(txt_igv, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 120, -1));

        txt_total_pagar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_total_pagar.setEnabled(false);
        jPanel2.add(txt_total_pagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 110, 120, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 400, 380, 140));

        jButton_RegistrarVenta.setBackground(new java.awt.Color(51, 255, 255));
        jButton_RegistrarVenta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_RegistrarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/impresora.png"))); // NOI18N
        jButton_RegistrarVenta.setText("Registrar Compra");
        jButton_RegistrarVenta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_RegistrarVenta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_RegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RegistrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_RegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, 170, 100));

        jButton_RegistrarVenta1.setBackground(new java.awt.Color(51, 255, 255));
        jButton_RegistrarVenta1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_RegistrarVenta1.setText("<html><center>Registrar Compra y guardar almacen<html>");
        jButton_RegistrarVenta1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_RegistrarVenta1.setPreferredSize(new java.awt.Dimension(255, 22));
        jButton_RegistrarVenta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RegistrarVenta1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_RegistrarVenta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, 160, 100));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_busca_proveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_busca_proveedorActionPerformed
        String proveedorBuscar = txt_proveedor_buscar.getText().trim();
        Connection cn = Conexion.conectar();
        String sql = "select ruc, razon_social from tb_proveedor where ruc = '" + proveedorBuscar + "'";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                jComboBox_proveedor.setSelectedItem(rs.getString("ruc") + "-" + rs.getString("razon_social"));
            } else {
                jComboBox_proveedor.setSelectedItem("Seleccione proveedor:");
                JOptionPane.showMessageDialog(null, "¡ruc del prooveedor incorrecto o no encontrado!");
            }
            txt_proveedor_buscar.setText("");
            cn.close();
        } catch (SQLException e) {
            System.out.println("¡Error al buscar proveedor!, " + e);
        }
    }//GEN-LAST:event_jButton_busca_proveedorActionPerformed

    private void jButton_añadir_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_añadir_productoActionPerformed

        String combo = this.jComboBox_producto.getSelectedItem().toString();
        //validar que seleccione un producto
        if (combo.equalsIgnoreCase("Seleccione producto:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {
            //validar que ingrese una cantidad
            if (!txt_cantidad.getText().isEmpty()) {
                //validar que el usuario no ingrese caracteres no numericos
                boolean validacion = validar(txt_cantidad.getText());
                if (validacion == true) {
                    //validar que la cantidad sea mayor a cero
                    if (Integer.parseInt(txt_cantidad.getText()) > 0) {
                        cantidad = Integer.parseInt(txt_cantidad.getText());
                        //ejecutar metodo para obtener datos del producto
                        this.DatosDelProducto();
                        //validar que la cantidad de productos seleccionado no sea mayor al stock de la base de datos
                        /*if (cantidad <= cantidadProductoBBDD) {*/

                            subtotal = precioUnitario * cantidad;
                            totalPagar = subtotal + igv + descuento;

                            //redondear decimales
                            subtotal = (double) Math.round(subtotal * 100) / 100;
                            igv = (double) Math.round(igv * 100) / 100;
                            descuento = (double) Math.round(descuento * 100) / 100;
                            totalPagar = (double) Math.round(totalPagar * 100) / 100;

                            //se crea un nuevo producto
                            producto = new DetalleCompra(auxIdDetalle,//idDetalleCompra
                                    1, //idCabecera
                                    idProducto,
                                    nombre,
                                    Integer.parseInt(txt_cantidad.getText()),
                                    precioUnitario,
                                    subtotal,
                                    descuento,
                                    igv,
                                    totalPagar,
                                    1//estado
                            );
                            //añadir a la lista
                            listaProductos.add(producto);
                            JOptionPane.showMessageDialog(null, "Producto Agregado");
                            auxIdDetalle++;
                            txt_cantidad.setText("");//limpiar el campo
                            //volver a cargar combo productos
                            this.CargarComboProductos();
                            this.CalcularTotalPagar();
                        /*} else {
                            JOptionPane.showMessageDialog(null, "La cantidad supera el Stock");
                        }*/
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser cero (0), ni negativa");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "En la cantidad no se admiten caracteres no numericos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingresa la cantidad de productos");
            }
        }
        //llamar al metodo
        this.listaTablaProductos();
    }//GEN-LAST:event_jButton_añadir_productoActionPerformed

    int idArrayList = 0;
    private void jTable_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_productosMouseClicked
        int fila_point = jTable_productos.rowAtPoint(evt.getPoint());
        int columna_point = 0;
        if (fila_point > -1) {
            idArrayList = (int) modeloDatosProductos.getValueAt(fila_point, columna_point);
        }
        int opcion = JOptionPane.showConfirmDialog(null, "¿Eliminar Producto?");
        //opciones de confir dialog - (si = 0; no = 1; cancel = 2; close = -1)
        switch (opcion) {
            case 0: //presione si
                listaProductos.remove(idArrayList - 1);
                this.CalcularTotalPagar();
                this.listaTablaProductos();
                break;
            case 1: //presione no
                break;
            default://sea que presione cancel (2) o close (-1)
                break;
        }
    }//GEN-LAST:event_jTable_productosMouseClicked

    private void jButton_RegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RegistrarVentaActionPerformed

        CabeceraCompra cabeceraCompra = new CabeceraCompra();
        DetalleCompra detalleCompra = new DetalleCompra();
        Ctrl_RegistrarCompra controlCompra = new Ctrl_RegistrarCompra();
        Ctrl_Empleado controlEmpleado = new Ctrl_Empleado();
        int idUsuarioLog = controlEmpleado.idUsuarioLogeado;
        String tipoDoc = jComboBox_tipo_documento.getSelectedItem().toString() == "Factura" ? "F" : "B";
        String estadoPago = jComboBox_estado_pago.getSelectedItem().toString() == "Pendiente de pago" ? "X" : "P";
        System.out.println("Error al Iniciar Sesion" + idUsuarioLog);
        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(date);

        if (!jComboBox_proveedor.getSelectedItem().equals("Seleccione proveedor:")) {
            if (listaProductos.size() > 0) {

                //metodo para obtener el id del cliente
                this.ObtenerIdProveedor();
                //registrar cabecera
                cabeceraCompra.setIdCabeceraCompra(0);
                cabeceraCompra.setIdProveedor(idProveedor);
                cabeceraCompra.setIdEmpleado(idUsuarioLog);
                cabeceraCompra.setValorCompra(Double.parseDouble(txt_total_pagar.getText()));
                cabeceraCompra.setOrdenCompra(txt_orden_compra.getText());
                cabeceraCompra.setTipoDocumento(tipoDoc);
                cabeceraCompra.setNumeroDocumento(txt_numero_documento.getText());
                cabeceraCompra.setFechaCompra(fechaActual);
                cabeceraCompra.setEstadoPago(estadoPago);
                cabeceraCompra.setEstado(1);

                if (controlCompra.guardar(cabeceraCompra)) {
                    JOptionPane.showMessageDialog(null, "¡Compra Registrada!");
                    this.ObtenerUltimoId();

                    //guardar detalle
                    for (DetalleCompra elemento : listaProductos) {
                        detalleCompra.setIdDetalleCompra(0);
                        detalleCompra.setIdCabeceraCompra(0);
                        detalleCompra.setIdProducto(elemento.getIdProducto());
                        detalleCompra.setCantidad(elemento.getCantidad());
                        detalleCompra.setPrecioUnitario(elemento.getPrecioUnitario());
                        detalleCompra.setSubTotal(elemento.getSubTotal());
                        detalleCompra.setDescuento(elemento.getDescuento());
                        detalleCompra.setIgv(elemento.getIgv());
                        detalleCompra.setTotalPagar(elemento.getTotalPagar());
                        detalleCompra.setEstado(1);

                        if (controlCompra.guardarDetalle(detalleCompra)) {
                            //System.out.println("Detalle de Venta Registrado");

                            txt_subtotal.setText("0.0");
                            txt_igv.setText("0.0");
                            txt_descuento.setText("0.0");
                            txt_total_pagar.setText("0.0");
                            auxIdDetalle = 1;

                            this.CargarComboProveedor();
                            //this.GuardarProductosDirectoAlmacen(ultimoId,elemento.getIdProducto(), elemento.getCantidad());                       

                        } else {
                            JOptionPane.showMessageDialog(null, "¡Error al guardar detalle de compra!");
                        }
                    }
                    //vaciamos la lista
                    txt_orden_compra.setText("");
                    txt_numero_documento.setText("");
                    listaProductos.clear();
                    listaTablaProductos();

                } else {
                    JOptionPane.showMessageDialog(null, "¡Error al guardar cabecera de compra!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "¡Seleccione un producto!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "¡Seleccione un proveedor!");
        }
    }//GEN-LAST:event_jButton_RegistrarVentaActionPerformed

    private void jButton_RegistrarVenta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RegistrarVenta1ActionPerformed
        CabeceraCompra cabeceraCompra = new CabeceraCompra();
        DetalleCompra detalleCompra = new DetalleCompra();
        Ctrl_RegistrarCompra controlCompra = new Ctrl_RegistrarCompra();
        Ctrl_Empleado controlEmpleado = new Ctrl_Empleado();
        int idUsuarioLog = controlEmpleado.idUsuarioLogeado;
        String tipoDoc = jComboBox_tipo_documento.getSelectedItem().toString() == "Factura" ? "F" : "B";
        String estadoPago = jComboBox_estado_pago.getSelectedItem().toString() == "Pendiente de pago" ? "X" : "P";
        System.out.println("Error al Iniciar Sesion" + idUsuarioLog);
        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(date);

        if (!jComboBox_proveedor.getSelectedItem().equals("Seleccione proveedor:")) {
            if (listaProductos.size() > 0) {

                //metodo para obtener el id del cliente
                this.ObtenerIdProveedor();
                //registrar cabecera
                cabeceraCompra.setIdCabeceraCompra(0);
                cabeceraCompra.setIdProveedor(idProveedor);
                cabeceraCompra.setIdEmpleado(idUsuarioLog);
                cabeceraCompra.setValorCompra(Double.parseDouble(txt_total_pagar.getText()));
                cabeceraCompra.setOrdenCompra(txt_orden_compra.getText());
                cabeceraCompra.setTipoDocumento(tipoDoc);
                cabeceraCompra.setNumeroDocumento(txt_numero_documento.getText());
                cabeceraCompra.setFechaCompra(fechaActual);
                cabeceraCompra.setEstadoPago(estadoPago);
                cabeceraCompra.setEstado(1);

                if (controlCompra.guardar(cabeceraCompra)) {
                    JOptionPane.showMessageDialog(null, "¡Compra Registrada!");
                    this.ObtenerUltimoId();

                    //guardar detalle
                    for (DetalleCompra elemento : listaProductos) {
                        detalleCompra.setIdDetalleCompra(0);
                        detalleCompra.setIdCabeceraCompra(0);
                        detalleCompra.setIdProducto(elemento.getIdProducto());
                        detalleCompra.setCantidad(elemento.getCantidad());
                        detalleCompra.setPrecioUnitario(elemento.getPrecioUnitario());
                        detalleCompra.setSubTotal(elemento.getSubTotal());
                        detalleCompra.setDescuento(elemento.getDescuento());
                        detalleCompra.setIgv(elemento.getIgv());
                        detalleCompra.setTotalPagar(elemento.getTotalPagar());
                        detalleCompra.setEstado(1);

                        if (controlCompra.guardarDetalle(detalleCompra)) {
                            //System.out.println("Detalle de Venta Registrado");

                            txt_subtotal.setText("0.0");
                            txt_igv.setText("0.0");
                            txt_descuento.setText("0.0");
                            txt_total_pagar.setText("0.0");
                            auxIdDetalle = 1;

                            this.CargarComboProveedor();
                            this.GuardarProductosDirectoAlmacen(ultimoId,elemento.getIdProducto(), elemento.getCantidad());                       

                        } else {
                            JOptionPane.showMessageDialog(null, "¡Error al guardar detalle de compra!");
                        }
                    }
                    //vaciamos la lista
                    txt_orden_compra.setText("");
                    txt_numero_documento.setText("");
                    listaProductos.clear();
                    listaTablaProductos();

                } else {
                    JOptionPane.showMessageDialog(null, "¡Error al guardar cabecera de compra!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "¡Seleccione un producto!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "¡Seleccione un proveedor!");
        }
    }//GEN-LAST:event_jButton_RegistrarVenta1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_RegistrarVenta;
    private javax.swing.JButton jButton_RegistrarVenta1;
    private javax.swing.JButton jButton_añadir_producto;
    private javax.swing.JButton jButton_busca_proveedor;
    private javax.swing.JComboBox<String> jComboBox_estado_pago;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JComboBox<String> jComboBox_proveedor;
    private javax.swing.JComboBox<String> jComboBox_tipo_documento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    public static javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descuento;
    private javax.swing.JTextField txt_igv;
    private javax.swing.JTextField txt_numero_documento;
    private javax.swing.JTextField txt_orden_compra;
    private javax.swing.JTextField txt_proveedor_buscar;
    private javax.swing.JTextField txt_subtotal;
    public static javax.swing.JTextField txt_total_pagar;
    // End of variables declaration//GEN-END:variables
    private void CargarComboProveedor() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_proveedor where estado = 1";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_proveedor.removeAllItems();
            jComboBox_proveedor.addItem("Seleccione proveedor:");
            while (rs.next()) {
                jComboBox_proveedor.addItem(rs.getString("ruc") + "-" + rs.getString("razon_social"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("¡Error al cargar los proveedores !" + e);
        }
    }

    /*
    Metodo para cargar los productos en el jComboBox
     */
    private void CargarComboProductos() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_producto where estado = 1";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("Seleccione producto:");
            while (rs.next()) {
                jComboBox_producto.addItem(rs.getString("nombre_producto"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("¡Error al cargar productos, !" + e);
        }
    }

    /*
        Metodo para validar que el usuario no ingrese caracteres no numericos
     */
    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /*
        Metodo para validar que el usuario no ingrese caracteres no numericos
     */
    private boolean validarDouble(String valor) {
        try {
            double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /*
        Metodo para mostrar los datos del producto seleccionado
     */
    private void DatosDelProducto() {
        try {
            String sql = "select * from tb_producto where nombre_producto = '" + this.jComboBox_producto.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idProducto = rs.getInt("idProducto");
                nombre = rs.getString("nombre_producto");
                cantidadProductoBBDD = rs.getInt("cantidad");
                precioUnitario = rs.getDouble("precio");
                porcentajeIgv = rs.getInt("porcentaje_igv");
                this.CalcularIgv(precioUnitario, porcentajeIgv);
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener datos del producto, " + e);
        }
    }

    private double CalcularIgv(double precio, int porcentajeIgv) {
        int p_igv = porcentajeIgv;

        switch (p_igv) {
            case 0:
                igv = 0.0;
                break;
            case 18:
                igv = (precio * cantidad) * 0.18;
                break;
            default:
                break;
        }

        return igv;
    }

    /*
    Metodo para calcular el total a pagar de todos los productos agregados
     */
    private void CalcularTotalPagar() {
        subtotalGeneral = 0;
        descuentoGeneral = 0;
        igvGeneral = 0;
        totalPagarGeneral = 0;

        for (DetalleCompra elemento : listaProductos) {
            subtotalGeneral += elemento.getSubTotal();
            descuentoGeneral += elemento.getDescuento();
            igvGeneral += elemento.getIgv();
            totalPagarGeneral += elemento.getTotalPagar();
        }
        //redondear decimales
        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
        igvGeneral = (double) Math.round(igvGeneral * 100) / 100;
        descuentoGeneral = (double) Math.round(descuentoGeneral * 100) / 100;
        totalPagarGeneral = (double) Math.round(totalPagarGeneral * 100) / 100;

        //enviar datos a la vista
        txt_subtotal.setText(String.valueOf(subtotalGeneral));
        txt_igv.setText(String.valueOf(igvGeneral));
        txt_descuento.setText(String.valueOf(descuentoGeneral));
        txt_total_pagar.setText(String.valueOf(totalPagarGeneral));
    }

    /*
    Metodo para obtener id del cliente
     */
    private void ObtenerIdProveedor() {
        try {
            String sql = "select * from tb_proveedor where concat(ruc,'-',razon_social) = '" + this.jComboBox_proveedor.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idProveedor = rs.getInt("idProveedor");
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener id del proveedoor, " + e);
        }
    }

    public static final String uuid() {
        String result = java.util.UUID.randomUUID().toString();

        result.replaceAll("-", "");
        result.substring(0, 10);

        return result;
    }

    //metodo para restar la cantidad (stock) de los productos vendidos
    private void GuardarProductosDirectoAlmacen(int idCabeceraCompra, int idProducto, int cantidad) {
        String sku = "MAPU"+uuid();
        Almacen almacen = new Almacen();
        Ctrl_Almacen controlAlmacen = new Ctrl_Almacen();
        almacen.setIdAlmacen(0);
        almacen.setIdCabeceraCompra(idCabeceraCompra);
        almacen.setIdProducto(idProducto);
        almacen.setSku(sku);
        almacen.setStock(cantidad);
        almacen.setUbicacion("A-001");
        almacen.setEstado(1);
        controlAlmacen.guardar(almacen);
    }


    private void ObtenerUltimoId() {
        try {
            String sql = "SELECT MAX(idCabeceraCompra) AS id FROM tb_cabecera_compra;";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                ultimoId = rs.getInt("id");
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener el ultimo id, " + e);
        }

    }
}
